<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="602" onload="init(evt)" viewBox="0 0 1200 602" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="602" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python main.py -t 200 -e 2000 -g 10 -p best_params.yaml</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="591.00"> </text><svg id="frames" x="10" width="1180" total_samples="14070"><g><title>run_simulation (agent.py:467) (39 samples, 0.28%)</title><rect x="0.1635%" y="132" width="0.2772%" height="15" fill="rgb(227,0,7)" fg:x="23" fg:w="39"/><text x="0.4135%" y="142.50"></text></g><g><title>run_simulation (agent.py:475) (100 samples, 0.71%)</title><rect x="0.4478%" y="132" width="0.7107%" height="15" fill="rgb(217,0,24)" fg:x="63" fg:w="100"/><text x="0.6978%" y="142.50"></text></g><g><title>__init__ (agent.py:56) (100 samples, 0.71%)</title><rect x="0.4478%" y="148" width="0.7107%" height="15" fill="rgb(221,193,54)" fg:x="63" fg:w="100"/><text x="0.6978%" y="158.50"></text></g><g><title>check_radar (agent.py:114) (94 samples, 0.67%)</title><rect x="1.4144%" y="164" width="0.6681%" height="15" fill="rgb(248,212,6)" fg:x="199" fg:w="94"/><text x="1.6644%" y="174.50"></text></g><g><title>check_radar (agent.py:118) (43 samples, 0.31%)</title><rect x="2.2246%" y="164" width="0.3056%" height="15" fill="rgb(208,68,35)" fg:x="313" fg:w="43"/><text x="2.4746%" y="174.50"></text></g><g><title>run_simulation (agent.py:518) (233 samples, 1.66%)</title><rect x="1.2580%" y="132" width="1.6560%" height="15" fill="rgb(232,128,0)" fg:x="177" fg:w="233"/><text x="1.5080%" y="142.50"></text></g><g><title>update (agent.py:188) (217 samples, 1.54%)</title><rect x="1.3717%" y="148" width="1.5423%" height="15" fill="rgb(207,160,47)" fg:x="193" fg:w="217"/><text x="1.6217%" y="158.50"></text></g><g><title>check_radar (agent.py:122) (38 samples, 0.27%)</title><rect x="2.6439%" y="164" width="0.2701%" height="15" fill="rgb(228,23,34)" fg:x="372" fg:w="38"/><text x="2.8939%" y="174.50"></text></g><g><title>run_simulation (agent.py:559) (20 samples, 0.14%)</title><rect x="2.9140%" y="132" width="0.1421%" height="15" fill="rgb(218,30,26)" fg:x="410" fg:w="20"/><text x="3.1640%" y="142.50"></text></g><g><title>run_simulation (agent.py:578) (130 samples, 0.92%)</title><rect x="3.1130%" y="132" width="0.9240%" height="15" fill="rgb(220,122,19)" fg:x="438" fg:w="130"/><text x="3.3630%" y="142.50"></text></g><g><title>&lt;module&gt; (main.py:102) (597 samples, 4.24%)</title><rect x="0.1137%" y="68" width="4.2431%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="597"/><text x="0.3637%" y="78.50">&lt;modu..</text></g><g><title>start_simulation (main.py:35) (597 samples, 4.24%)</title><rect x="0.1137%" y="84" width="4.2431%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="597"/><text x="0.3637%" y="94.50">start..</text></g><g><title>run_population (agent.py:619) (597 samples, 4.24%)</title><rect x="0.1137%" y="100" width="4.2431%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="597"/><text x="0.3637%" y="110.50">run_p..</text></g><g><title>run (neat/population.py:89) (596 samples, 4.24%)</title><rect x="0.1208%" y="116" width="4.2360%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="596"/><text x="0.3708%" y="126.50">run (..</text></g><g><title>run_simulation (agent.py:579) (45 samples, 0.32%)</title><rect x="4.0370%" y="132" width="0.3198%" height="15" fill="rgb(217,207,13)" fg:x="568" fg:w="45"/><text x="4.2870%" y="142.50"></text></g><g><title>run_simulation (agent.py:467) (31 samples, 0.22%)</title><rect x="4.3852%" y="132" width="0.2203%" height="15" fill="rgb(231,73,38)" fg:x="617" fg:w="31"/><text x="4.6352%" y="142.50"></text></g><g><title>run_simulation (agent.py:475) (118 samples, 0.84%)</title><rect x="4.6055%" y="132" width="0.8387%" height="15" fill="rgb(225,20,46)" fg:x="648" fg:w="118"/><text x="4.8555%" y="142.50"></text></g><g><title>__init__ (agent.py:56) (118 samples, 0.84%)</title><rect x="4.6055%" y="148" width="0.8387%" height="15" fill="rgb(210,31,41)" fg:x="648" fg:w="118"/><text x="4.8555%" y="158.50"></text></g><g><title>run_simulation (agent.py:482) (21 samples, 0.15%)</title><rect x="5.4442%" y="132" width="0.1493%" height="15" fill="rgb(221,200,47)" fg:x="766" fg:w="21"/><text x="5.6942%" y="142.50"></text></g><g><title>rotate_center (agent.py:220) (24 samples, 0.17%)</title><rect x="5.6503%" y="164" width="0.1706%" height="15" fill="rgb(226,26,5)" fg:x="795" fg:w="24"/><text x="5.9003%" y="174.50"></text></g><g><title>update (agent.py:140) (52 samples, 0.37%)</title><rect x="5.6361%" y="148" width="0.3696%" height="15" fill="rgb(249,33,26)" fg:x="793" fg:w="52"/><text x="5.8861%" y="158.50"></text></g><g><title>rotate_center (agent.py:223) (25 samples, 0.18%)</title><rect x="5.8280%" y="164" width="0.1777%" height="15" fill="rgb(235,183,28)" fg:x="820" fg:w="25"/><text x="6.0780%" y="174.50"></text></g><g><title>get_reward (agent.py:211) (32 samples, 0.23%)</title><rect x="6.2260%" y="164" width="0.2274%" height="15" fill="rgb(221,5,38)" fg:x="876" fg:w="32"/><text x="6.4760%" y="174.50"></text></g><g><title>prepare_single_trajectory (reward.py:193) (29 samples, 0.21%)</title><rect x="6.2473%" y="180" width="0.2061%" height="15" fill="rgb(247,18,42)" fg:x="879" fg:w="29"/><text x="6.4973%" y="190.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (32 samples, 0.23%)</title><rect x="6.5458%" y="228" width="0.2274%" height="15" fill="rgb(241,131,45)" fg:x="921" fg:w="32"/><text x="6.7958%" y="238.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (34 samples, 0.24%)</title><rect x="6.7733%" y="228" width="0.2416%" height="15" fill="rgb(249,31,29)" fg:x="953" fg:w="34"/><text x="7.0233%" y="238.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (32 samples, 0.23%)</title><rect x="6.7875%" y="244" width="0.2274%" height="15" fill="rgb(225,111,53)" fg:x="955" fg:w="32"/><text x="7.0375%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (70 samples, 0.50%)</title><rect x="6.5458%" y="212" width="0.4975%" height="15" fill="rgb(238,160,17)" fg:x="921" fg:w="70"/><text x="6.7958%" y="222.50"></text></g><g><title>forward (reward.py:49) (90 samples, 0.64%)</title><rect x="6.4961%" y="196" width="0.6397%" height="15" fill="rgb(214,148,48)" fg:x="914" fg:w="90"/><text x="6.7461%" y="206.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (20 samples, 0.14%)</title><rect x="7.2210%" y="228" width="0.1421%" height="15" fill="rgb(232,36,49)" fg:x="1016" fg:w="20"/><text x="7.4710%" y="238.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (22 samples, 0.16%)</title><rect x="7.3632%" y="228" width="0.1564%" height="15" fill="rgb(209,103,24)" fg:x="1036" fg:w="22"/><text x="7.6132%" y="238.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (20 samples, 0.14%)</title><rect x="7.3774%" y="244" width="0.1421%" height="15" fill="rgb(229,88,8)" fg:x="1038" fg:w="20"/><text x="7.6274%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (47 samples, 0.33%)</title><rect x="7.2210%" y="212" width="0.3340%" height="15" fill="rgb(213,181,19)" fg:x="1016" fg:w="47"/><text x="7.4710%" y="222.50"></text></g><g><title>forward (reward.py:51) (66 samples, 0.47%)</title><rect x="7.1713%" y="196" width="0.4691%" height="15" fill="rgb(254,191,54)" fg:x="1009" fg:w="66"/><text x="7.4213%" y="206.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (27 samples, 0.19%)</title><rect x="7.7399%" y="228" width="0.1919%" height="15" fill="rgb(241,83,37)" fg:x="1089" fg:w="27"/><text x="7.9899%" y="238.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (16 samples, 0.11%)</title><rect x="7.9318%" y="228" width="0.1137%" height="15" fill="rgb(233,36,39)" fg:x="1116" fg:w="16"/><text x="8.1818%" y="238.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (16 samples, 0.11%)</title><rect x="7.9318%" y="244" width="0.1137%" height="15" fill="rgb(226,3,54)" fg:x="1116" fg:w="16"/><text x="8.1818%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (45 samples, 0.32%)</title><rect x="7.7399%" y="212" width="0.3198%" height="15" fill="rgb(245,192,40)" fg:x="1089" fg:w="45"/><text x="7.9899%" y="222.50"></text></g><g><title>forward (reward.py:53) (64 samples, 0.45%)</title><rect x="7.6972%" y="196" width="0.4549%" height="15" fill="rgb(238,167,29)" fg:x="1083" fg:w="64"/><text x="7.9472%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (28 samples, 0.20%)</title><rect x="8.2516%" y="212" width="0.1990%" height="15" fill="rgb(232,182,51)" fg:x="1161" fg:w="28"/><text x="8.5016%" y="222.50"></text></g><g><title>forward (reward.py:55) (52 samples, 0.37%)</title><rect x="8.1947%" y="196" width="0.3696%" height="15" fill="rgb(231,60,39)" fg:x="1153" fg:w="52"/><text x="8.4447%" y="206.50"></text></g><g><title>relu (torch/nn/functional.py:1457) (16 samples, 0.11%)</title><rect x="8.4506%" y="212" width="0.1137%" height="15" fill="rgb(208,69,12)" fg:x="1189" fg:w="16"/><text x="8.7006%" y="222.50"></text></g><g><title>forward (reward.py:57) (46 samples, 0.33%)</title><rect x="8.6354%" y="196" width="0.3269%" height="15" fill="rgb(235,93,37)" fg:x="1215" fg:w="46"/><text x="8.8854%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (44 samples, 0.31%)</title><rect x="8.6496%" y="212" width="0.3127%" height="15" fill="rgb(213,116,39)" fg:x="1217" fg:w="44"/><text x="8.8996%" y="222.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (44 samples, 0.31%)</title><rect x="8.6496%" y="228" width="0.3127%" height="15" fill="rgb(222,207,29)" fg:x="1217" fg:w="44"/><text x="8.8996%" y="238.50"></text></g><g><title>forward (reward.py:58) (19 samples, 0.14%)</title><rect x="8.9623%" y="196" width="0.1350%" height="15" fill="rgb(206,96,30)" fg:x="1261" fg:w="19"/><text x="9.2123%" y="206.50"></text></g><g><title>get_reward (agent.py:212) (373 samples, 2.65%)</title><rect x="6.4534%" y="164" width="2.6510%" height="15" fill="rgb(218,138,4)" fg:x="908" fg:w="373"/><text x="6.7034%" y="174.50">ge..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (369 samples, 2.62%)</title><rect x="6.4819%" y="180" width="2.6226%" height="15" fill="rgb(250,191,14)" fg:x="912" fg:w="369"/><text x="6.7319%" y="190.50">_c..</text></g><g><title>update (agent.py:147) (450 samples, 3.20%)</title><rect x="6.0270%" y="148" width="3.1983%" height="15" fill="rgb(239,60,40)" fg:x="848" fg:w="450"/><text x="6.2770%" y="158.50">upd..</text></g><g><title>get_reward (agent.py:213) (17 samples, 0.12%)</title><rect x="9.1045%" y="164" width="0.1208%" height="15" fill="rgb(206,27,48)" fg:x="1281" fg:w="17"/><text x="9.3545%" y="174.50"></text></g><g><title>check_radar (agent.py:114) (442 samples, 3.14%)</title><rect x="9.4812%" y="164" width="3.1414%" height="15" fill="rgb(225,35,8)" fg:x="1334" fg:w="442"/><text x="9.7312%" y="174.50">che..</text></g><g><title>check_radar (agent.py:115) (18 samples, 0.13%)</title><rect x="12.6226%" y="164" width="0.1279%" height="15" fill="rgb(250,213,24)" fg:x="1776" fg:w="18"/><text x="12.8726%" y="174.50"></text></g><g><title>check_radar (agent.py:116) (51 samples, 0.36%)</title><rect x="12.7505%" y="164" width="0.3625%" height="15" fill="rgb(247,123,22)" fg:x="1794" fg:w="51"/><text x="13.0005%" y="174.50"></text></g><g><title>check_radar (agent.py:117) (59 samples, 0.42%)</title><rect x="13.1130%" y="164" width="0.4193%" height="15" fill="rgb(231,138,38)" fg:x="1845" fg:w="59"/><text x="13.3630%" y="174.50"></text></g><g><title>check_radar (agent.py:118) (250 samples, 1.78%)</title><rect x="13.5323%" y="164" width="1.7768%" height="15" fill="rgb(231,145,46)" fg:x="1904" fg:w="250"/><text x="13.7823%" y="174.50">c..</text></g><g><title>check_radar (agent.py:120) (42 samples, 0.30%)</title><rect x="15.3092%" y="164" width="0.2985%" height="15" fill="rgb(251,118,11)" fg:x="2154" fg:w="42"/><text x="15.5592%" y="174.50"></text></g><g><title>check_radar (agent.py:121) (32 samples, 0.23%)</title><rect x="15.6077%" y="164" width="0.2274%" height="15" fill="rgb(217,147,25)" fg:x="2196" fg:w="32"/><text x="15.8577%" y="174.50"></text></g><g><title>check_radar (agent.py:122) (227 samples, 1.61%)</title><rect x="15.8351%" y="164" width="1.6134%" height="15" fill="rgb(247,81,37)" fg:x="2228" fg:w="227"/><text x="16.0851%" y="174.50"></text></g><g><title>run_simulation (agent.py:518) (1,672 samples, 11.88%)</title><rect x="5.6290%" y="132" width="11.8834%" height="15" fill="rgb(209,12,38)" fg:x="792" fg:w="1672"/><text x="5.8790%" y="142.50">run_simulation (ag..</text></g><g><title>update (agent.py:188) (1,141 samples, 8.11%)</title><rect x="9.4030%" y="148" width="8.1095%" height="15" fill="rgb(227,1,9)" fg:x="1323" fg:w="1141"/><text x="9.6530%" y="158.50">update (age..</text></g><g><title>get_reward (agent.py:211) (46 samples, 0.33%)</title><rect x="17.7754%" y="148" width="0.3269%" height="15" fill="rgb(248,47,43)" fg:x="2501" fg:w="46"/><text x="18.0254%" y="158.50"></text></g><g><title>prepare_single_trajectory (reward.py:193) (42 samples, 0.30%)</title><rect x="17.8038%" y="164" width="0.2985%" height="15" fill="rgb(221,10,30)" fg:x="2505" fg:w="42"/><text x="18.0538%" y="174.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (41 samples, 0.29%)</title><rect x="18.2232%" y="212" width="0.2914%" height="15" fill="rgb(210,229,1)" fg:x="2564" fg:w="41"/><text x="18.4732%" y="222.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (39 samples, 0.28%)</title><rect x="18.5146%" y="212" width="0.2772%" height="15" fill="rgb(222,148,37)" fg:x="2605" fg:w="39"/><text x="18.7646%" y="222.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (39 samples, 0.28%)</title><rect x="18.5146%" y="228" width="0.2772%" height="15" fill="rgb(234,67,33)" fg:x="2605" fg:w="39"/><text x="18.7646%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (86 samples, 0.61%)</title><rect x="18.2161%" y="196" width="0.6112%" height="15" fill="rgb(247,98,35)" fg:x="2563" fg:w="86"/><text x="18.4661%" y="206.50"></text></g><g><title>forward (reward.py:49) (109 samples, 0.77%)</title><rect x="18.1379%" y="180" width="0.7747%" height="15" fill="rgb(247,138,52)" fg:x="2552" fg:w="109"/><text x="18.3879%" y="190.50"></text></g><g><title>forward (reward.py:50) (15 samples, 0.11%)</title><rect x="18.9126%" y="180" width="0.1066%" height="15" fill="rgb(213,79,30)" fg:x="2661" fg:w="15"/><text x="19.1626%" y="190.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (28 samples, 0.20%)</title><rect x="19.0832%" y="212" width="0.1990%" height="15" fill="rgb(246,177,23)" fg:x="2685" fg:w="28"/><text x="19.3332%" y="222.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (27 samples, 0.19%)</title><rect x="19.2822%" y="212" width="0.1919%" height="15" fill="rgb(230,62,27)" fg:x="2713" fg:w="27"/><text x="19.5322%" y="222.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (27 samples, 0.19%)</title><rect x="19.2822%" y="228" width="0.1919%" height="15" fill="rgb(216,154,8)" fg:x="2713" fg:w="27"/><text x="19.5322%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (57 samples, 0.41%)</title><rect x="19.0760%" y="196" width="0.4051%" height="15" fill="rgb(244,35,45)" fg:x="2684" fg:w="57"/><text x="19.3260%" y="206.50"></text></g><g><title>forward (reward.py:51) (71 samples, 0.50%)</title><rect x="19.0192%" y="180" width="0.5046%" height="15" fill="rgb(251,115,12)" fg:x="2676" fg:w="71"/><text x="19.2692%" y="190.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (15 samples, 0.11%)</title><rect x="19.6375%" y="212" width="0.1066%" height="15" fill="rgb(240,54,50)" fg:x="2763" fg:w="15"/><text x="19.8875%" y="222.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (15 samples, 0.11%)</title><rect x="19.7441%" y="212" width="0.1066%" height="15" fill="rgb(233,84,52)" fg:x="2778" fg:w="15"/><text x="19.9941%" y="222.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (15 samples, 0.11%)</title><rect x="19.7441%" y="228" width="0.1066%" height="15" fill="rgb(207,117,47)" fg:x="2778" fg:w="15"/><text x="19.9941%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (32 samples, 0.23%)</title><rect x="19.6375%" y="196" width="0.2274%" height="15" fill="rgb(249,43,39)" fg:x="2763" fg:w="32"/><text x="19.8875%" y="206.50"></text></g><g><title>forward (reward.py:53) (49 samples, 0.35%)</title><rect x="19.5878%" y="180" width="0.3483%" height="15" fill="rgb(209,38,44)" fg:x="2756" fg:w="49"/><text x="19.8378%" y="190.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (17 samples, 0.12%)</title><rect x="20.0498%" y="212" width="0.1208%" height="15" fill="rgb(236,212,23)" fg:x="2821" fg:w="17"/><text x="20.2998%" y="222.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (17 samples, 0.12%)</title><rect x="20.1706%" y="212" width="0.1208%" height="15" fill="rgb(242,79,21)" fg:x="2838" fg:w="17"/><text x="20.4206%" y="222.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (15 samples, 0.11%)</title><rect x="20.1848%" y="228" width="0.1066%" height="15" fill="rgb(211,96,35)" fg:x="2840" fg:w="15"/><text x="20.4348%" y="238.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (40 samples, 0.28%)</title><rect x="20.0426%" y="196" width="0.2843%" height="15" fill="rgb(253,215,40)" fg:x="2820" fg:w="40"/><text x="20.2926%" y="206.50"></text></g><g><title>forward (reward.py:55) (62 samples, 0.44%)</title><rect x="19.9787%" y="180" width="0.4407%" height="15" fill="rgb(211,81,21)" fg:x="2811" fg:w="62"/><text x="20.2287%" y="190.50"></text></g><g><title>forward (reward.py:57) (47 samples, 0.33%)</title><rect x="20.4904%" y="180" width="0.3340%" height="15" fill="rgb(208,190,38)" fg:x="2883" fg:w="47"/><text x="20.7404%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (45 samples, 0.32%)</title><rect x="20.5046%" y="196" width="0.3198%" height="15" fill="rgb(235,213,38)" fg:x="2885" fg:w="45"/><text x="20.7546%" y="206.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (45 samples, 0.32%)</title><rect x="20.5046%" y="212" width="0.3198%" height="15" fill="rgb(237,122,38)" fg:x="2885" fg:w="45"/><text x="20.7546%" y="222.50"></text></g><g><title>get_reward (agent.py:212) (396 samples, 2.81%)</title><rect x="18.1023%" y="148" width="2.8145%" height="15" fill="rgb(244,218,35)" fg:x="2547" fg:w="396"/><text x="18.3523%" y="158.50">ge..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (392 samples, 2.79%)</title><rect x="18.1308%" y="164" width="2.7861%" height="15" fill="rgb(240,68,47)" fg:x="2551" fg:w="392"/><text x="18.3808%" y="174.50">_c..</text></g><g><title>run_simulation (agent.py:519) (501 samples, 3.56%)</title><rect x="17.5124%" y="132" width="3.5608%" height="15" fill="rgb(210,16,53)" fg:x="2464" fg:w="501"/><text x="17.7624%" y="142.50">run_..</text></g><g><title>get_reward (agent.py:213) (22 samples, 0.16%)</title><rect x="20.9168%" y="148" width="0.1564%" height="15" fill="rgb(235,124,12)" fg:x="2943" fg:w="22"/><text x="21.1668%" y="158.50"></text></g><g><title>run_simulation (agent.py:559) (144 samples, 1.02%)</title><rect x="21.1372%" y="132" width="1.0235%" height="15" fill="rgb(224,169,11)" fg:x="2974" fg:w="144"/><text x="21.3872%" y="142.50"></text></g><g><title>run_simulation (agent.py:578) (844 samples, 6.00%)</title><rect x="22.3881%" y="132" width="5.9986%" height="15" fill="rgb(250,166,2)" fg:x="3150" fg:w="844"/><text x="22.6381%" y="142.50">run_simu..</text></g><g><title>&lt;module&gt; (main.py:113) (3,627 samples, 25.78%)</title><rect x="4.3568%" y="68" width="25.7783%" height="15" fill="rgb(242,216,29)" fg:x="613" fg:w="3627"/><text x="4.6068%" y="78.50">&lt;module&gt; (main.py:113)</text></g><g><title>start_simulation (main.py:35) (3,627 samples, 25.78%)</title><rect x="4.3568%" y="84" width="25.7783%" height="15" fill="rgb(230,116,27)" fg:x="613" fg:w="3627"/><text x="4.6068%" y="94.50">start_simulation (main.py:35)</text></g><g><title>run_population (agent.py:619) (3,627 samples, 25.78%)</title><rect x="4.3568%" y="100" width="25.7783%" height="15" fill="rgb(228,99,48)" fg:x="613" fg:w="3627"/><text x="4.6068%" y="110.50">run_population (agent.py:619)</text></g><g><title>run (neat/population.py:89) (3,623 samples, 25.75%)</title><rect x="4.3852%" y="116" width="25.7498%" height="15" fill="rgb(253,11,6)" fg:x="617" fg:w="3623"/><text x="4.6352%" y="126.50">run (neat/population.py:89)</text></g><g><title>run_simulation (agent.py:579) (246 samples, 1.75%)</title><rect x="28.3866%" y="132" width="1.7484%" height="15" fill="rgb(247,143,39)" fg:x="3994" fg:w="246"/><text x="28.6366%" y="142.50"></text></g><g><title>&lt;module&gt; (reward.py:16) (16 samples, 0.11%)</title><rect x="30.1706%" y="260" width="0.1137%" height="15" fill="rgb(236,97,10)" fg:x="4245" fg:w="16"/><text x="30.4206%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (16 samples, 0.11%)</title><rect x="30.1706%" y="276" width="0.1137%" height="15" fill="rgb(233,208,19)" fg:x="4245" fg:w="16"/><text x="30.4206%" y="286.50"></text></g><g><title>&lt;module&gt; (main.py:12) (43 samples, 0.31%)</title><rect x="30.1350%" y="68" width="0.3056%" height="15" fill="rgb(216,164,2)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (43 samples, 0.31%)</title><rect x="30.1350%" y="84" width="0.3056%" height="15" fill="rgb(220,129,5)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (43 samples, 0.31%)</title><rect x="30.1350%" y="100" width="0.3056%" height="15" fill="rgb(242,17,10)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (43 samples, 0.31%)</title><rect x="30.1350%" y="116" width="0.3056%" height="15" fill="rgb(242,107,0)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (43 samples, 0.31%)</title><rect x="30.1350%" y="132" width="0.3056%" height="15" fill="rgb(251,28,31)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (43 samples, 0.31%)</title><rect x="30.1350%" y="148" width="0.3056%" height="15" fill="rgb(233,223,10)" fg:x="4240" fg:w="43"/><text x="30.3850%" y="158.50"></text></g><g><title>&lt;module&gt; (agent.py:19) (38 samples, 0.27%)</title><rect x="30.1706%" y="164" width="0.2701%" height="15" fill="rgb(215,21,27)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (38 samples, 0.27%)</title><rect x="30.1706%" y="180" width="0.2701%" height="15" fill="rgb(232,23,21)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (38 samples, 0.27%)</title><rect x="30.1706%" y="196" width="0.2701%" height="15" fill="rgb(244,5,23)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (38 samples, 0.27%)</title><rect x="30.1706%" y="212" width="0.2701%" height="15" fill="rgb(226,81,46)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (38 samples, 0.27%)</title><rect x="30.1706%" y="228" width="0.2701%" height="15" fill="rgb(247,70,30)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (38 samples, 0.27%)</title><rect x="30.1706%" y="244" width="0.2701%" height="15" fill="rgb(212,68,19)" fg:x="4245" fg:w="38"/><text x="30.4206%" y="254.50"></text></g><g><title>&lt;module&gt; (main.py:8) (22 samples, 0.16%)</title><rect x="30.5188%" y="68" width="0.1564%" height="15" fill="rgb(240,187,13)" fg:x="4294" fg:w="22"/><text x="30.7688%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (22 samples, 0.16%)</title><rect x="30.5188%" y="84" width="0.1564%" height="15" fill="rgb(223,113,26)" fg:x="4294" fg:w="22"/><text x="30.7688%" y="94.50"></text></g><g><title>run_simulation (agent.py:467) (53 samples, 0.38%)</title><rect x="30.7178%" y="132" width="0.3767%" height="15" fill="rgb(206,192,2)" fg:x="4322" fg:w="53"/><text x="30.9678%" y="142.50"></text></g><g><title>__init__ (agent.py:56) (100 samples, 0.71%)</title><rect x="31.1016%" y="148" width="0.7107%" height="15" fill="rgb(241,108,4)" fg:x="4376" fg:w="100"/><text x="31.3516%" y="158.50"></text></g><g><title>run_simulation (agent.py:475) (101 samples, 0.72%)</title><rect x="31.1016%" y="132" width="0.7178%" height="15" fill="rgb(247,173,49)" fg:x="4376" fg:w="101"/><text x="31.3516%" y="142.50"></text></g><g><title>run_simulation (agent.py:482) (35 samples, 0.25%)</title><rect x="31.8266%" y="132" width="0.2488%" height="15" fill="rgb(224,114,35)" fg:x="4478" fg:w="35"/><text x="32.0766%" y="142.50"></text></g><g><title>update (agent.py:140) (31 samples, 0.22%)</title><rect x="32.0824%" y="148" width="0.2203%" height="15" fill="rgb(245,159,27)" fg:x="4514" fg:w="31"/><text x="32.3324%" y="158.50"></text></g><g><title>rotate_center (agent.py:223) (20 samples, 0.14%)</title><rect x="32.1606%" y="164" width="0.1421%" height="15" fill="rgb(245,172,44)" fg:x="4525" fg:w="20"/><text x="32.4106%" y="174.50"></text></g><g><title>check_radar (agent.py:114) (353 samples, 2.51%)</title><rect x="32.4094%" y="164" width="2.5089%" height="15" fill="rgb(236,23,11)" fg:x="4560" fg:w="353"/><text x="32.6594%" y="174.50">ch..</text></g><g><title>check_radar (agent.py:115) (17 samples, 0.12%)</title><rect x="34.9183%" y="164" width="0.1208%" height="15" fill="rgb(205,117,38)" fg:x="4913" fg:w="17"/><text x="35.1683%" y="174.50"></text></g><g><title>check_radar (agent.py:116) (44 samples, 0.31%)</title><rect x="35.0391%" y="164" width="0.3127%" height="15" fill="rgb(237,72,25)" fg:x="4930" fg:w="44"/><text x="35.2891%" y="174.50"></text></g><g><title>check_radar (agent.py:117) (43 samples, 0.31%)</title><rect x="35.3518%" y="164" width="0.3056%" height="15" fill="rgb(244,70,9)" fg:x="4974" fg:w="43"/><text x="35.6018%" y="174.50"></text></g><g><title>check_radar (agent.py:118) (214 samples, 1.52%)</title><rect x="35.6574%" y="164" width="1.5210%" height="15" fill="rgb(217,125,39)" fg:x="5017" fg:w="214"/><text x="35.9074%" y="174.50"></text></g><g><title>check_radar (agent.py:120) (53 samples, 0.38%)</title><rect x="37.1784%" y="164" width="0.3767%" height="15" fill="rgb(235,36,10)" fg:x="5231" fg:w="53"/><text x="37.4284%" y="174.50"></text></g><g><title>check_radar (agent.py:121) (32 samples, 0.23%)</title><rect x="37.5551%" y="164" width="0.2274%" height="15" fill="rgb(251,123,47)" fg:x="5284" fg:w="32"/><text x="37.8051%" y="174.50"></text></g><g><title>check_radar (agent.py:122) (168 samples, 1.19%)</title><rect x="37.7825%" y="164" width="1.1940%" height="15" fill="rgb(221,13,13)" fg:x="5316" fg:w="168"/><text x="38.0325%" y="174.50"></text></g><g><title>run_simulation (agent.py:518) (973 samples, 6.92%)</title><rect x="32.0824%" y="132" width="6.9154%" height="15" fill="rgb(238,131,9)" fg:x="4514" fg:w="973"/><text x="32.3324%" y="142.50">run_simul..</text></g><g><title>update (agent.py:188) (933 samples, 6.63%)</title><rect x="32.3667%" y="148" width="6.6311%" height="15" fill="rgb(211,50,8)" fg:x="4554" fg:w="933"/><text x="32.6167%" y="158.50">update (a..</text></g><g><title>run_simulation (agent.py:559) (195 samples, 1.39%)</title><rect x="39.0334%" y="132" width="1.3859%" height="15" fill="rgb(245,182,24)" fg:x="5492" fg:w="195"/><text x="39.2834%" y="142.50"></text></g><g><title>run_simulation (agent.py:578) (1,293 samples, 9.19%)</title><rect x="40.6752%" y="132" width="9.1898%" height="15" fill="rgb(242,14,37)" fg:x="5723" fg:w="1293"/><text x="40.9252%" y="142.50">run_simulatio..</text></g><g><title>run (neat/population.py:89) (2,971 samples, 21.12%)</title><rect x="30.6894%" y="116" width="21.1158%" height="15" fill="rgb(246,228,12)" fg:x="4318" fg:w="2971"/><text x="30.9394%" y="126.50">run (neat/population.py:89)</text></g><g><title>run_simulation (agent.py:579) (273 samples, 1.94%)</title><rect x="49.8650%" y="132" width="1.9403%" height="15" fill="rgb(213,55,15)" fg:x="7016" fg:w="273"/><text x="50.1150%" y="142.50">r..</text></g><g><title>run_population (agent.py:619) (2,974 samples, 21.14%)</title><rect x="30.6752%" y="100" width="21.1372%" height="15" fill="rgb(209,9,3)" fg:x="4316" fg:w="2974"/><text x="30.9252%" y="110.50">run_population (agent.py:619)</text></g><g><title>&lt;module&gt; (main.py:86) (2,983 samples, 21.20%)</title><rect x="30.6752%" y="68" width="21.2011%" height="15" fill="rgb(230,59,30)" fg:x="4316" fg:w="2983"/><text x="30.9252%" y="78.50">&lt;module&gt; (main.py:86)</text></g><g><title>start_simulation (main.py:35) (2,983 samples, 21.20%)</title><rect x="30.6752%" y="84" width="21.2011%" height="15" fill="rgb(209,121,21)" fg:x="4316" fg:w="2983"/><text x="30.9252%" y="94.50">start_simulation (main.py:35)</text></g><g><title>&lt;module&gt; (torch/_decomp/decompositions.py:10) (16 samples, 0.11%)</title><rect x="52.0398%" y="484" width="0.1137%" height="15" fill="rgb(220,109,13)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (16 samples, 0.11%)</title><rect x="52.0398%" y="500" width="0.1137%" height="15" fill="rgb(232,18,1)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (16 samples, 0.11%)</title><rect x="52.0398%" y="516" width="0.1137%" height="15" fill="rgb(215,41,42)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (16 samples, 0.11%)</title><rect x="52.0398%" y="532" width="0.1137%" height="15" fill="rgb(224,123,36)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (16 samples, 0.11%)</title><rect x="52.0398%" y="548" width="0.1137%" height="15" fill="rgb(240,125,3)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (16 samples, 0.11%)</title><rect x="52.0398%" y="564" width="0.1137%" height="15" fill="rgb(205,98,50)" fg:x="7322" fg:w="16"/><text x="52.2898%" y="574.50"></text></g><g><title>&lt;module&gt; (torch/__init__.py:1468) (20 samples, 0.14%)</title><rect x="52.0256%" y="164" width="0.1421%" height="15" fill="rgb(205,185,37)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (20 samples, 0.14%)</title><rect x="52.0256%" y="180" width="0.1421%" height="15" fill="rgb(238,207,15)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (20 samples, 0.14%)</title><rect x="52.0256%" y="196" width="0.1421%" height="15" fill="rgb(213,199,42)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (20 samples, 0.14%)</title><rect x="52.0256%" y="212" width="0.1421%" height="15" fill="rgb(235,201,11)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (20 samples, 0.14%)</title><rect x="52.0256%" y="228" width="0.1421%" height="15" fill="rgb(207,46,11)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (20 samples, 0.14%)</title><rect x="52.0256%" y="244" width="0.1421%" height="15" fill="rgb(241,35,35)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (20 samples, 0.14%)</title><rect x="52.0256%" y="260" width="0.1421%" height="15" fill="rgb(243,32,47)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (20 samples, 0.14%)</title><rect x="52.0256%" y="276" width="0.1421%" height="15" fill="rgb(247,202,23)" fg:x="7320" fg:w="20"/><text x="52.2756%" y="286.50"></text></g><g><title>&lt;module&gt; (torch/_meta_registrations.py:7) (18 samples, 0.13%)</title><rect x="52.0398%" y="292" width="0.1279%" height="15" fill="rgb(219,102,11)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (18 samples, 0.13%)</title><rect x="52.0398%" y="308" width="0.1279%" height="15" fill="rgb(243,110,44)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (18 samples, 0.13%)</title><rect x="52.0398%" y="324" width="0.1279%" height="15" fill="rgb(222,74,54)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (18 samples, 0.13%)</title><rect x="52.0398%" y="340" width="0.1279%" height="15" fill="rgb(216,99,12)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (18 samples, 0.13%)</title><rect x="52.0398%" y="356" width="0.1279%" height="15" fill="rgb(226,22,26)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (18 samples, 0.13%)</title><rect x="52.0398%" y="372" width="0.1279%" height="15" fill="rgb(217,163,10)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="382.50"></text></g><g><title>&lt;module&gt; (torch/_decomp/__init__.py:169) (18 samples, 0.13%)</title><rect x="52.0398%" y="388" width="0.1279%" height="15" fill="rgb(213,25,53)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (18 samples, 0.13%)</title><rect x="52.0398%" y="404" width="0.1279%" height="15" fill="rgb(252,105,26)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (18 samples, 0.13%)</title><rect x="52.0398%" y="420" width="0.1279%" height="15" fill="rgb(220,39,43)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (18 samples, 0.13%)</title><rect x="52.0398%" y="436" width="0.1279%" height="15" fill="rgb(229,68,48)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (18 samples, 0.13%)</title><rect x="52.0398%" y="452" width="0.1279%" height="15" fill="rgb(252,8,32)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (18 samples, 0.13%)</title><rect x="52.0398%" y="468" width="0.1279%" height="15" fill="rgb(223,20,43)" fg:x="7322" fg:w="18"/><text x="52.2898%" y="478.50"></text></g><g><title>&lt;module&gt; (main.py:9) (55 samples, 0.39%)</title><rect x="51.8763%" y="68" width="0.3909%" height="15" fill="rgb(229,81,49)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (55 samples, 0.39%)</title><rect x="51.8763%" y="84" width="0.3909%" height="15" fill="rgb(236,28,36)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (55 samples, 0.39%)</title><rect x="51.8763%" y="100" width="0.3909%" height="15" fill="rgb(249,185,26)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (55 samples, 0.39%)</title><rect x="51.8763%" y="116" width="0.3909%" height="15" fill="rgb(249,174,33)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (55 samples, 0.39%)</title><rect x="51.8763%" y="132" width="0.3909%" height="15" fill="rgb(233,201,37)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (55 samples, 0.39%)</title><rect x="51.8763%" y="148" width="0.3909%" height="15" fill="rgb(221,78,26)" fg:x="7299" fg:w="55"/><text x="52.1263%" y="158.50"></text></g><g><title>__next__ (torch/utils/data/dataloader.py:629) (18 samples, 0.13%)</title><rect x="52.4236%" y="116" width="0.1279%" height="15" fill="rgb(250,127,30)" fg:x="7376" fg:w="18"/><text x="52.6736%" y="126.50"></text></g><g><title>__getitem__ (reward.py:95) (101 samples, 0.72%)</title><rect x="53.2552%" y="196" width="0.7178%" height="15" fill="rgb(230,49,44)" fg:x="7493" fg:w="101"/><text x="53.5052%" y="206.50"></text></g><g><title>__getitem__ (reward.py:96) (93 samples, 0.66%)</title><rect x="53.9730%" y="196" width="0.6610%" height="15" fill="rgb(229,67,23)" fg:x="7594" fg:w="93"/><text x="54.2230%" y="206.50"></text></g><g><title>__getitem__ (reward.py:97) (100 samples, 0.71%)</title><rect x="54.6340%" y="196" width="0.7107%" height="15" fill="rgb(249,83,47)" fg:x="7687" fg:w="100"/><text x="54.8840%" y="206.50"></text></g><g><title>__getitem__ (reward.py:98) (145 samples, 1.03%)</title><rect x="55.3447%" y="196" width="1.0306%" height="15" fill="rgb(215,43,3)" fg:x="7787" fg:w="145"/><text x="55.5947%" y="206.50"></text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:51) (558 samples, 3.97%)</title><rect x="53.0988%" y="148" width="3.9659%" height="15" fill="rgb(238,154,13)" fg:x="7471" fg:w="558"/><text x="53.3488%" y="158.50">fetc..</text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:51) (557 samples, 3.96%)</title><rect x="53.1059%" y="164" width="3.9588%" height="15" fill="rgb(219,56,2)" fg:x="7472" fg:w="557"/><text x="53.3559%" y="174.50">&lt;lis..</text></g><g><title>__getitem__ (torch/utils/data/dataset.py:298) (542 samples, 3.85%)</title><rect x="53.2125%" y="180" width="3.8522%" height="15" fill="rgb(233,0,4)" fg:x="7487" fg:w="542"/><text x="53.4625%" y="190.50">__ge..</text></g><g><title>__getitem__ (reward.py:99) (97 samples, 0.69%)</title><rect x="56.3753%" y="196" width="0.6894%" height="15" fill="rgb(235,30,7)" fg:x="7932" fg:w="97"/><text x="56.6253%" y="206.50"></text></g><g><title>collate (torch/utils/data/_utils/collate.py:139) (33 samples, 0.23%)</title><rect x="57.1429%" y="180" width="0.2345%" height="15" fill="rgb(250,79,13)" fg:x="8040" fg:w="33"/><text x="57.3929%" y="190.50"></text></g><g><title>__next__ (torch/utils/data/dataloader.py:633) (829 samples, 5.89%)</title><rect x="52.5515%" y="116" width="5.8920%" height="15" fill="rgb(211,146,34)" fg:x="7394" fg:w="829"/><text x="52.8015%" y="126.50">__next_..</text></g><g><title>_next_data (torch/utils/data/dataloader.py:677) (821 samples, 5.84%)</title><rect x="52.6084%" y="132" width="5.8351%" height="15" fill="rgb(228,22,38)" fg:x="7402" fg:w="821"/><text x="52.8584%" y="142.50">_next_d..</text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:54) (194 samples, 1.38%)</title><rect x="57.0647%" y="148" width="1.3788%" height="15" fill="rgb(235,168,5)" fg:x="8029" fg:w="194"/><text x="57.3147%" y="158.50"></text></g><g><title>default_collate (torch/utils/data/_utils/collate.py:265) (194 samples, 1.38%)</title><rect x="57.0647%" y="164" width="1.3788%" height="15" fill="rgb(221,155,16)" fg:x="8029" fg:w="194"/><text x="57.3147%" y="174.50"></text></g><g><title>collate (torch/utils/data/_utils/collate.py:142) (150 samples, 1.07%)</title><rect x="57.3774%" y="180" width="1.0661%" height="15" fill="rgb(215,215,53)" fg:x="8073" fg:w="150"/><text x="57.6274%" y="190.50"></text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/collate.py:142) (150 samples, 1.07%)</title><rect x="57.3774%" y="196" width="1.0661%" height="15" fill="rgb(223,4,10)" fg:x="8073" fg:w="150"/><text x="57.6274%" y="206.50"></text></g><g><title>collate (torch/utils/data/_utils/collate.py:119) (149 samples, 1.06%)</title><rect x="57.3845%" y="212" width="1.0590%" height="15" fill="rgb(234,103,6)" fg:x="8074" fg:w="149"/><text x="57.6345%" y="222.50"></text></g><g><title>collate_tensor_fn (torch/utils/data/_utils/collate.py:162) (145 samples, 1.03%)</title><rect x="57.4129%" y="228" width="1.0306%" height="15" fill="rgb(227,97,0)" fg:x="8078" fg:w="145"/><text x="57.6629%" y="238.50"></text></g><g><title>train_model (reward.py:262) (853 samples, 6.06%)</title><rect x="52.3881%" y="100" width="6.0625%" height="15" fill="rgb(234,150,53)" fg:x="7371" fg:w="853"/><text x="52.6381%" y="110.50">train_mo..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (24 samples, 0.17%)</title><rect x="58.5288%" y="148" width="0.1706%" height="15" fill="rgb(228,201,54)" fg:x="8235" fg:w="24"/><text x="58.7788%" y="158.50"></text></g><g><title>forward (reward.py:49) (39 samples, 0.28%)</title><rect x="58.4790%" y="132" width="0.2772%" height="15" fill="rgb(222,22,37)" fg:x="8228" fg:w="39"/><text x="58.7290%" y="142.50"></text></g><g><title>forward (reward.py:51) (15 samples, 0.11%)</title><rect x="58.7775%" y="132" width="0.1066%" height="15" fill="rgb(237,53,32)" fg:x="8270" fg:w="15"/><text x="59.0275%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (20 samples, 0.14%)</title><rect x="58.9268%" y="148" width="0.1421%" height="15" fill="rgb(233,25,53)" fg:x="8291" fg:w="20"/><text x="59.1768%" y="158.50"></text></g><g><title>forward (reward.py:53) (28 samples, 0.20%)</title><rect x="58.9126%" y="132" width="0.1990%" height="15" fill="rgb(210,40,34)" fg:x="8289" fg:w="28"/><text x="59.1626%" y="142.50"></text></g><g><title>forward (reward.py:55) (20 samples, 0.14%)</title><rect x="59.1116%" y="132" width="0.1421%" height="15" fill="rgb(241,220,44)" fg:x="8317" fg:w="20"/><text x="59.3616%" y="142.50"></text></g><g><title>forward (reward.py:57) (19 samples, 0.14%)</title><rect x="59.2608%" y="132" width="0.1350%" height="15" fill="rgb(235,28,35)" fg:x="8338" fg:w="19"/><text x="59.5108%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (16 samples, 0.11%)</title><rect x="59.2822%" y="148" width="0.1137%" height="15" fill="rgb(210,56,17)" fg:x="8341" fg:w="16"/><text x="59.5322%" y="158.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (16 samples, 0.11%)</title><rect x="59.2822%" y="164" width="0.1137%" height="15" fill="rgb(224,130,29)" fg:x="8341" fg:w="16"/><text x="59.5322%" y="174.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1538) (133 samples, 0.95%)</title><rect x="58.4790%" y="116" width="0.9453%" height="15" fill="rgb(235,212,8)" fg:x="8228" fg:w="133"/><text x="58.7290%" y="126.50"></text></g><g><title>train_model (reward.py:269) (138 samples, 0.98%)</title><rect x="58.4577%" y="100" width="0.9808%" height="15" fill="rgb(223,33,50)" fg:x="8225" fg:w="138"/><text x="58.7077%" y="110.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (19 samples, 0.14%)</title><rect x="59.4527%" y="148" width="0.1350%" height="15" fill="rgb(219,149,13)" fg:x="8365" fg:w="19"/><text x="59.7027%" y="158.50"></text></g><g><title>forward (reward.py:49) (21 samples, 0.15%)</title><rect x="59.4527%" y="132" width="0.1493%" height="15" fill="rgb(250,156,29)" fg:x="8365" fg:w="21"/><text x="59.7027%" y="142.50"></text></g><g><title>forward (reward.py:53) (21 samples, 0.15%)</title><rect x="59.7157%" y="132" width="0.1493%" height="15" fill="rgb(216,193,19)" fg:x="8402" fg:w="21"/><text x="59.9657%" y="142.50"></text></g><g><title>forward (reward.py:55) (16 samples, 0.11%)</title><rect x="59.8721%" y="132" width="0.1137%" height="15" fill="rgb(216,135,14)" fg:x="8424" fg:w="16"/><text x="60.1221%" y="142.50"></text></g><g><title>forward (reward.py:57) (15 samples, 0.11%)</title><rect x="59.9929%" y="132" width="0.1066%" height="15" fill="rgb(241,47,5)" fg:x="8441" fg:w="15"/><text x="60.2429%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1538) (95 samples, 0.68%)</title><rect x="59.4527%" y="116" width="0.6752%" height="15" fill="rgb(233,42,35)" fg:x="8365" fg:w="95"/><text x="59.7027%" y="126.50"></text></g><g><title>train_model (reward.py:270) (98 samples, 0.70%)</title><rect x="59.4385%" y="100" width="0.6965%" height="15" fill="rgb(231,13,6)" fg:x="8363" fg:w="98"/><text x="59.6885%" y="110.50"></text></g><g><title>train_model (reward.py:271) (21 samples, 0.15%)</title><rect x="60.1350%" y="100" width="0.1493%" height="15" fill="rgb(207,181,40)" fg:x="8461" fg:w="21"/><text x="60.3850%" y="110.50"></text></g><g><title>train_model (reward.py:274) (26 samples, 0.18%)</title><rect x="60.2843%" y="100" width="0.1848%" height="15" fill="rgb(254,173,49)" fg:x="8482" fg:w="26"/><text x="60.5343%" y="110.50"></text></g><g><title>preference_loss (reward.py:123) (20 samples, 0.14%)</title><rect x="60.3269%" y="116" width="0.1421%" height="15" fill="rgb(221,1,38)" fg:x="8488" fg:w="20"/><text x="60.5769%" y="126.50"></text></g><g><title>binary_cross_entropy (torch/nn/functional.py:3098) (16 samples, 0.11%)</title><rect x="60.3554%" y="132" width="0.1137%" height="15" fill="rgb(206,124,46)" fg:x="8492" fg:w="16"/><text x="60.6054%" y="142.50"></text></g><g><title>train_model (reward.py:277) (31 samples, 0.22%)</title><rect x="60.4691%" y="100" width="0.2203%" height="15" fill="rgb(249,21,11)" fg:x="8508" fg:w="31"/><text x="60.7191%" y="110.50"></text></g><g><title>__next__ (torch/utils/data/dataloader.py:629) (19 samples, 0.14%)</title><rect x="60.7747%" y="116" width="0.1350%" height="15" fill="rgb(222,201,40)" fg:x="8551" fg:w="19"/><text x="61.0247%" y="126.50"></text></g><g><title>__iter__ (torch/utils/data/sampler.py:254) (25 samples, 0.18%)</title><rect x="60.9097%" y="164" width="0.1777%" height="15" fill="rgb(235,61,29)" fg:x="8570" fg:w="25"/><text x="61.1597%" y="174.50"></text></g><g><title>_next_data (torch/utils/data/dataloader.py:676) (44 samples, 0.31%)</title><rect x="60.9097%" y="132" width="0.3127%" height="15" fill="rgb(219,207,3)" fg:x="8570" fg:w="44"/><text x="61.1597%" y="142.50"></text></g><g><title>_next_index (torch/utils/data/dataloader.py:623) (44 samples, 0.31%)</title><rect x="60.9097%" y="148" width="0.3127%" height="15" fill="rgb(222,56,46)" fg:x="8570" fg:w="44"/><text x="61.1597%" y="158.50"></text></g><g><title>__getitem__ (reward.py:95) (413 samples, 2.94%)</title><rect x="64.0654%" y="196" width="2.9353%" height="15" fill="rgb(239,76,54)" fg:x="9014" fg:w="413"/><text x="64.3154%" y="206.50">__..</text></g><g><title>__getitem__ (reward.py:96) (336 samples, 2.39%)</title><rect x="67.0007%" y="196" width="2.3881%" height="15" fill="rgb(231,124,27)" fg:x="9427" fg:w="336"/><text x="67.2507%" y="206.50">__..</text></g><g><title>__getitem__ (reward.py:97) (322 samples, 2.29%)</title><rect x="69.3888%" y="196" width="2.2886%" height="15" fill="rgb(249,195,6)" fg:x="9763" fg:w="322"/><text x="69.6388%" y="206.50">_..</text></g><g><title>__getitem__ (reward.py:98) (379 samples, 2.69%)</title><rect x="71.6773%" y="196" width="2.6937%" height="15" fill="rgb(237,174,47)" fg:x="10085" fg:w="379"/><text x="71.9273%" y="206.50">__..</text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:51) (2,101 samples, 14.93%)</title><rect x="63.1485%" y="148" width="14.9325%" height="15" fill="rgb(206,201,31)" fg:x="8885" fg:w="2101"/><text x="63.3985%" y="158.50">fetch (torch/utils/data..</text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:51) (2,099 samples, 14.92%)</title><rect x="63.1628%" y="164" width="14.9183%" height="15" fill="rgb(231,57,52)" fg:x="8887" fg:w="2099"/><text x="63.4128%" y="174.50">&lt;listcomp&gt; (torch/utils..</text></g><g><title>__getitem__ (torch/utils/data/dataset.py:298) (2,041 samples, 14.51%)</title><rect x="63.5750%" y="180" width="14.5060%" height="15" fill="rgb(248,177,22)" fg:x="8945" fg:w="2041"/><text x="63.8250%" y="190.50">__getitem__ (torch/uti..</text></g><g><title>__getitem__ (reward.py:99) (522 samples, 3.71%)</title><rect x="74.3710%" y="196" width="3.7100%" height="15" fill="rgb(215,211,37)" fg:x="10464" fg:w="522"/><text x="74.6210%" y="206.50">__ge..</text></g><g><title>collate (torch/utils/data/_utils/collate.py:137) (40 samples, 0.28%)</title><rect x="78.1166%" y="180" width="0.2843%" height="15" fill="rgb(241,128,51)" fg:x="10991" fg:w="40"/><text x="78.3666%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (torch/utils/data/_utils/collate.py:137) (36 samples, 0.26%)</title><rect x="78.1450%" y="196" width="0.2559%" height="15" fill="rgb(227,165,31)" fg:x="10995" fg:w="36"/><text x="78.3950%" y="206.50"></text></g><g><title>collate (torch/utils/data/_utils/collate.py:139) (241 samples, 1.71%)</title><rect x="78.4009%" y="180" width="1.7129%" height="15" fill="rgb(228,167,24)" fg:x="11031" fg:w="241"/><text x="78.6509%" y="190.50"></text></g><g><title>__next__ (torch/utils/data/dataloader.py:633) (3,265 samples, 23.21%)</title><rect x="60.9097%" y="116" width="23.2054%" height="15" fill="rgb(228,143,12)" fg:x="8570" fg:w="3265"/><text x="61.1597%" y="126.50">__next__ (torch/utils/data/dataloader..</text></g><g><title>_next_data (torch/utils/data/dataloader.py:677) (3,221 samples, 22.89%)</title><rect x="61.2225%" y="132" width="22.8927%" height="15" fill="rgb(249,149,8)" fg:x="8614" fg:w="3221"/><text x="61.4725%" y="142.50">_next_data (torch/utils/data/dataloa..</text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:54) (849 samples, 6.03%)</title><rect x="78.0810%" y="148" width="6.0341%" height="15" fill="rgb(243,35,44)" fg:x="10986" fg:w="849"/><text x="78.3310%" y="158.50">fetch (t..</text></g><g><title>default_collate (torch/utils/data/_utils/collate.py:265) (849 samples, 6.03%)</title><rect x="78.0810%" y="164" width="6.0341%" height="15" fill="rgb(246,89,9)" fg:x="10986" fg:w="849"/><text x="78.3310%" y="174.50">default_..</text></g><g><title>collate (torch/utils/data/_utils/collate.py:142) (563 samples, 4.00%)</title><rect x="80.1137%" y="180" width="4.0014%" height="15" fill="rgb(233,213,13)" fg:x="11272" fg:w="563"/><text x="80.3637%" y="190.50">coll..</text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/collate.py:142) (563 samples, 4.00%)</title><rect x="80.1137%" y="196" width="4.0014%" height="15" fill="rgb(233,141,41)" fg:x="11272" fg:w="563"/><text x="80.3637%" y="206.50">&lt;lis..</text></g><g><title>collate (torch/utils/data/_utils/collate.py:119) (558 samples, 3.97%)</title><rect x="80.1493%" y="212" width="3.9659%" height="15" fill="rgb(239,167,4)" fg:x="11277" fg:w="558"/><text x="80.3993%" y="222.50">coll..</text></g><g><title>collate_tensor_fn (torch/utils/data/_utils/collate.py:162) (555 samples, 3.94%)</title><rect x="80.1706%" y="228" width="3.9446%" height="15" fill="rgb(209,217,16)" fg:x="11280" fg:w="555"/><text x="80.4206%" y="238.50">coll..</text></g><g><title>train_model (reward.py:290) (3,292 samples, 23.40%)</title><rect x="60.7392%" y="100" width="23.3973%" height="15" fill="rgb(219,88,35)" fg:x="8546" fg:w="3292"/><text x="60.9892%" y="110.50">train_model (reward.py:290)</text></g><g><title>forward (torch/nn/modules/linear.py:114) (42 samples, 0.30%)</title><rect x="84.3070%" y="164" width="0.2985%" height="15" fill="rgb(220,193,23)" fg:x="11862" fg:w="42"/><text x="84.5570%" y="174.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (81 samples, 0.58%)</title><rect x="84.2928%" y="148" width="0.5757%" height="15" fill="rgb(230,90,52)" fg:x="11860" fg:w="81"/><text x="84.5428%" y="158.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (37 samples, 0.26%)</title><rect x="84.6055%" y="164" width="0.2630%" height="15" fill="rgb(252,106,19)" fg:x="11904" fg:w="37"/><text x="84.8555%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (34 samples, 0.24%)</title><rect x="84.6269%" y="180" width="0.2416%" height="15" fill="rgb(206,74,20)" fg:x="11907" fg:w="34"/><text x="84.8769%" y="190.50"></text></g><g><title>forward (reward.py:49) (102 samples, 0.72%)</title><rect x="84.2075%" y="132" width="0.7249%" height="15" fill="rgb(230,138,44)" fg:x="11848" fg:w="102"/><text x="84.4575%" y="142.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (35 samples, 0.25%)</title><rect x="85.1031%" y="164" width="0.2488%" height="15" fill="rgb(235,182,43)" fg:x="11974" fg:w="35"/><text x="85.3531%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (22 samples, 0.16%)</title><rect x="85.3518%" y="164" width="0.1564%" height="15" fill="rgb(242,16,51)" fg:x="12009" fg:w="22"/><text x="85.6018%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (20 samples, 0.14%)</title><rect x="85.3660%" y="180" width="0.1421%" height="15" fill="rgb(248,9,4)" fg:x="12011" fg:w="20"/><text x="85.6160%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (63 samples, 0.45%)</title><rect x="85.0888%" y="148" width="0.4478%" height="15" fill="rgb(210,31,22)" fg:x="11972" fg:w="63"/><text x="85.3388%" y="158.50"></text></g><g><title>forward (reward.py:51) (84 samples, 0.60%)</title><rect x="85.0178%" y="132" width="0.5970%" height="15" fill="rgb(239,54,39)" fg:x="11962" fg:w="84"/><text x="85.2678%" y="142.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (28 samples, 0.20%)</title><rect x="85.7356%" y="164" width="0.1990%" height="15" fill="rgb(230,99,41)" fg:x="12063" fg:w="28"/><text x="85.9856%" y="174.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (45 samples, 0.32%)</title><rect x="85.7285%" y="148" width="0.3198%" height="15" fill="rgb(253,106,12)" fg:x="12062" fg:w="45"/><text x="85.9785%" y="158.50"></text></g><g><title>forward (reward.py:53) (60 samples, 0.43%)</title><rect x="85.6859%" y="132" width="0.4264%" height="15" fill="rgb(213,46,41)" fg:x="12056" fg:w="60"/><text x="85.9359%" y="142.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (26 samples, 0.18%)</title><rect x="86.1976%" y="164" width="0.1848%" height="15" fill="rgb(215,133,35)" fg:x="12128" fg:w="26"/><text x="86.4476%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (19 samples, 0.14%)</title><rect x="86.3824%" y="164" width="0.1350%" height="15" fill="rgb(213,28,5)" fg:x="12154" fg:w="19"/><text x="86.6324%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (19 samples, 0.14%)</title><rect x="86.3824%" y="180" width="0.1350%" height="15" fill="rgb(215,77,49)" fg:x="12154" fg:w="19"/><text x="86.6324%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (48 samples, 0.34%)</title><rect x="86.1976%" y="148" width="0.3412%" height="15" fill="rgb(248,100,22)" fg:x="12128" fg:w="48"/><text x="86.4476%" y="158.50"></text></g><g><title>forward (reward.py:55) (66 samples, 0.47%)</title><rect x="86.1336%" y="132" width="0.4691%" height="15" fill="rgb(208,67,9)" fg:x="12119" fg:w="66"/><text x="86.3836%" y="142.50"></text></g><g><title>forward (reward.py:57) (37 samples, 0.26%)</title><rect x="86.6525%" y="132" width="0.2630%" height="15" fill="rgb(219,133,21)" fg:x="12192" fg:w="37"/><text x="86.9025%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (34 samples, 0.24%)</title><rect x="86.6738%" y="148" width="0.2416%" height="15" fill="rgb(246,46,29)" fg:x="12195" fg:w="34"/><text x="86.9238%" y="158.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (34 samples, 0.24%)</title><rect x="86.6738%" y="164" width="0.2416%" height="15" fill="rgb(246,185,52)" fg:x="12195" fg:w="34"/><text x="86.9238%" y="174.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1538) (408 samples, 2.90%)</title><rect x="84.2004%" y="116" width="2.8998%" height="15" fill="rgb(252,136,11)" fg:x="11847" fg:w="408"/><text x="84.4504%" y="126.50">_c..</text></g><g><title>forward (reward.py:58) (26 samples, 0.18%)</title><rect x="86.9154%" y="132" width="0.1848%" height="15" fill="rgb(219,138,53)" fg:x="12229" fg:w="26"/><text x="87.1654%" y="142.50"></text></g><g><title>train_model (reward.py:299) (415 samples, 2.95%)</title><rect x="84.1933%" y="100" width="2.9495%" height="15" fill="rgb(211,51,23)" fg:x="11846" fg:w="415"/><text x="84.4433%" y="110.50">tr..</text></g><g><title>forward (torch/nn/modules/linear.py:114) (27 samples, 0.19%)</title><rect x="87.2495%" y="164" width="0.1919%" height="15" fill="rgb(247,221,28)" fg:x="12276" fg:w="27"/><text x="87.4995%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (25 samples, 0.18%)</title><rect x="87.4414%" y="164" width="0.1777%" height="15" fill="rgb(251,222,45)" fg:x="12303" fg:w="25"/><text x="87.6914%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (25 samples, 0.18%)</title><rect x="87.4414%" y="180" width="0.1777%" height="15" fill="rgb(217,162,53)" fg:x="12303" fg:w="25"/><text x="87.6914%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (54 samples, 0.38%)</title><rect x="87.2495%" y="148" width="0.3838%" height="15" fill="rgb(229,93,14)" fg:x="12276" fg:w="54"/><text x="87.4995%" y="158.50"></text></g><g><title>forward (reward.py:49) (76 samples, 0.54%)</title><rect x="87.1642%" y="132" width="0.5402%" height="15" fill="rgb(209,67,49)" fg:x="12264" fg:w="76"/><text x="87.4142%" y="142.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (19 samples, 0.14%)</title><rect x="87.7967%" y="164" width="0.1350%" height="15" fill="rgb(213,87,29)" fg:x="12353" fg:w="19"/><text x="88.0467%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (17 samples, 0.12%)</title><rect x="87.9318%" y="164" width="0.1208%" height="15" fill="rgb(205,151,52)" fg:x="12372" fg:w="17"/><text x="88.1818%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (16 samples, 0.11%)</title><rect x="87.9389%" y="180" width="0.1137%" height="15" fill="rgb(253,215,39)" fg:x="12373" fg:w="16"/><text x="88.1889%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (39 samples, 0.28%)</title><rect x="87.7896%" y="148" width="0.2772%" height="15" fill="rgb(221,220,41)" fg:x="12352" fg:w="39"/><text x="88.0396%" y="158.50"></text></g><g><title>forward (reward.py:51) (59 samples, 0.42%)</title><rect x="87.7612%" y="132" width="0.4193%" height="15" fill="rgb(218,133,21)" fg:x="12348" fg:w="59"/><text x="88.0112%" y="142.50"></text></g><g><title>relu (torch/nn/functional.py:1457) (16 samples, 0.11%)</title><rect x="88.0668%" y="148" width="0.1137%" height="15" fill="rgb(221,193,43)" fg:x="12391" fg:w="16"/><text x="88.3168%" y="158.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (24 samples, 0.17%)</title><rect x="88.2658%" y="164" width="0.1706%" height="15" fill="rgb(240,128,52)" fg:x="12419" fg:w="24"/><text x="88.5158%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (23 samples, 0.16%)</title><rect x="88.4364%" y="164" width="0.1635%" height="15" fill="rgb(253,114,12)" fg:x="12443" fg:w="23"/><text x="88.6864%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (22 samples, 0.16%)</title><rect x="88.4435%" y="180" width="0.1564%" height="15" fill="rgb(215,223,47)" fg:x="12444" fg:w="22"/><text x="88.6935%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (48 samples, 0.34%)</title><rect x="88.2658%" y="148" width="0.3412%" height="15" fill="rgb(248,225,23)" fg:x="12419" fg:w="48"/><text x="88.5158%" y="158.50"></text></g><g><title>forward (reward.py:53) (69 samples, 0.49%)</title><rect x="88.2018%" y="132" width="0.4904%" height="15" fill="rgb(250,108,0)" fg:x="12410" fg:w="69"/><text x="88.4518%" y="142.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (24 samples, 0.17%)</title><rect x="88.7633%" y="164" width="0.1706%" height="15" fill="rgb(228,208,7)" fg:x="12489" fg:w="24"/><text x="89.0133%" y="174.50"></text></g><g><title>forward (torch/nn/modules/normalization.py:190) (15 samples, 0.11%)</title><rect x="88.9339%" y="164" width="0.1066%" height="15" fill="rgb(244,45,10)" fg:x="12513" fg:w="15"/><text x="89.1839%" y="174.50"></text></g><g><title>layer_norm (torch/nn/functional.py:2515) (15 samples, 0.11%)</title><rect x="88.9339%" y="180" width="0.1066%" height="15" fill="rgb(207,125,25)" fg:x="12513" fg:w="15"/><text x="89.1839%" y="190.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (40 samples, 0.28%)</title><rect x="88.7633%" y="148" width="0.2843%" height="15" fill="rgb(210,195,18)" fg:x="12489" fg:w="40"/><text x="89.0133%" y="158.50"></text></g><g><title>forward (reward.py:55) (56 samples, 0.40%)</title><rect x="88.7278%" y="132" width="0.3980%" height="15" fill="rgb(249,80,12)" fg:x="12484" fg:w="56"/><text x="88.9778%" y="142.50"></text></g><g><title>forward (reward.py:57) (37 samples, 0.26%)</title><rect x="89.1471%" y="132" width="0.2630%" height="15" fill="rgb(221,65,9)" fg:x="12543" fg:w="37"/><text x="89.3971%" y="142.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1501) (34 samples, 0.24%)</title><rect x="89.1684%" y="148" width="0.2416%" height="15" fill="rgb(235,49,36)" fg:x="12546" fg:w="34"/><text x="89.4184%" y="158.50"></text></g><g><title>forward (torch/nn/modules/linear.py:114) (34 samples, 0.24%)</title><rect x="89.1684%" y="164" width="0.2416%" height="15" fill="rgb(225,32,20)" fg:x="12546" fg:w="34"/><text x="89.4184%" y="174.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1538) (331 samples, 2.35%)</title><rect x="87.1642%" y="116" width="2.3525%" height="15" fill="rgb(215,141,46)" fg:x="12264" fg:w="331"/><text x="87.4142%" y="126.50">_..</text></g><g><title>forward (reward.py:58) (15 samples, 0.11%)</title><rect x="89.4101%" y="132" width="0.1066%" height="15" fill="rgb(250,160,47)" fg:x="12580" fg:w="15"/><text x="89.6601%" y="142.50"></text></g><g><title>parameter_log_hook (wandb/wandb_torch.py:105) (21 samples, 0.15%)</title><rect x="89.5451%" y="148" width="0.1493%" height="15" fill="rgb(216,222,40)" fg:x="12599" fg:w="21"/><text x="89.7951%" y="158.50"></text></g><g><title>train_model (reward.py:300) (360 samples, 2.56%)</title><rect x="87.1429%" y="100" width="2.5586%" height="15" fill="rgb(234,217,39)" fg:x="12261" fg:w="360"/><text x="87.3929%" y="110.50">tr..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1547) (22 samples, 0.16%)</title><rect x="89.5451%" y="116" width="0.1564%" height="15" fill="rgb(207,178,40)" fg:x="12599" fg:w="22"/><text x="89.7951%" y="126.50"></text></g><g><title>&lt;lambda&gt; (wandb/wandb_torch.py:110) (22 samples, 0.16%)</title><rect x="89.5451%" y="132" width="0.1564%" height="15" fill="rgb(221,136,13)" fg:x="12599" fg:w="22"/><text x="89.7951%" y="142.50"></text></g><g><title>bradley_terry_model (reward.py:118) (17 samples, 0.12%)</title><rect x="89.8365%" y="116" width="0.1208%" height="15" fill="rgb(249,199,10)" fg:x="12640" fg:w="17"/><text x="90.0865%" y="126.50"></text></g><g><title>train_model (reward.py:303) (40 samples, 0.28%)</title><rect x="89.7015%" y="100" width="0.2843%" height="15" fill="rgb(249,222,13)" fg:x="12621" fg:w="40"/><text x="89.9515%" y="110.50"></text></g><g><title>train_model (reward.py:304) (36 samples, 0.26%)</title><rect x="89.9858%" y="100" width="0.2559%" height="15" fill="rgb(244,185,38)" fg:x="12661" fg:w="36"/><text x="90.2358%" y="110.50"></text></g><g><title>train_model (reward.py:306) (57 samples, 0.41%)</title><rect x="90.2416%" y="100" width="0.4051%" height="15" fill="rgb(236,202,9)" fg:x="12697" fg:w="57"/><text x="90.4916%" y="110.50"></text></g><g><title>preference_loss (reward.py:123) (37 samples, 0.26%)</title><rect x="90.3838%" y="116" width="0.2630%" height="15" fill="rgb(250,229,37)" fg:x="12717" fg:w="37"/><text x="90.6338%" y="126.50"></text></g><g><title>binary_cross_entropy (torch/nn/functional.py:3098) (36 samples, 0.26%)</title><rect x="90.3909%" y="132" width="0.2559%" height="15" fill="rgb(206,174,23)" fg:x="12718" fg:w="36"/><text x="90.6409%" y="142.50"></text></g><g><title>calculate_accuracy (reward.py:199) (31 samples, 0.22%)</title><rect x="90.8600%" y="116" width="0.2203%" height="15" fill="rgb(211,33,43)" fg:x="12784" fg:w="31"/><text x="91.1100%" y="126.50"></text></g><g><title>calculate_accuracy (reward.py:200) (23 samples, 0.16%)</title><rect x="91.0803%" y="116" width="0.1635%" height="15" fill="rgb(245,58,50)" fg:x="12815" fg:w="23"/><text x="91.3303%" y="126.50"></text></g><g><title>train_model (reward.py:314) (80 samples, 0.57%)</title><rect x="90.8458%" y="100" width="0.5686%" height="15" fill="rgb(244,68,36)" fg:x="12782" fg:w="80"/><text x="91.0958%" y="110.50"></text></g><g><title>backward (torch/autograd/__init__.py:193) (22 samples, 0.16%)</title><rect x="91.4428%" y="132" width="0.1564%" height="15" fill="rgb(232,229,15)" fg:x="12866" fg:w="22"/><text x="91.6928%" y="142.50"></text></g><g><title>_make_grads (torch/autograd/__init__.py:89) (17 samples, 0.12%)</title><rect x="91.4783%" y="148" width="0.1208%" height="15" fill="rgb(254,30,23)" fg:x="12871" fg:w="17"/><text x="91.7283%" y="158.50"></text></g><g><title>backward (torch/autograd/__init__.py:200) (1,098 samples, 7.80%)</title><rect x="91.5991%" y="132" width="7.8038%" height="15" fill="rgb(235,160,14)" fg:x="12888" fg:w="1098"/><text x="91.8491%" y="142.50">backward (t..</text></g><g><title>train_model (reward.py:317) (1,125 samples, 8.00%)</title><rect x="91.4144%" y="100" width="7.9957%" height="15" fill="rgb(212,155,44)" fg:x="12862" fg:w="1125"/><text x="91.6644%" y="110.50">train_model..</text></g><g><title>backward (torch/_tensor.py:487) (1,124 samples, 7.99%)</title><rect x="91.4215%" y="116" width="7.9886%" height="15" fill="rgb(226,2,50)" fg:x="12863" fg:w="1124"/><text x="91.6715%" y="126.50">backward (t..</text></g><g><title>train_model (reward.py:319) (43 samples, 0.31%)</title><rect x="99.4385%" y="100" width="0.3056%" height="15" fill="rgb(234,177,6)" fg:x="13991" fg:w="43"/><text x="99.6885%" y="110.50"></text></g><g><title>wrapper (torch/optim/lr_scheduler.py:69) (43 samples, 0.31%)</title><rect x="99.4385%" y="116" width="0.3056%" height="15" fill="rgb(217,24,9)" fg:x="13991" fg:w="43"/><text x="99.6885%" y="126.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:280) (39 samples, 0.28%)</title><rect x="99.4670%" y="132" width="0.2772%" height="15" fill="rgb(220,13,46)" fg:x="13995" fg:w="39"/><text x="99.7170%" y="142.50"></text></g><g><title>_use_grad (torch/optim/optimizer.py:33) (39 samples, 0.28%)</title><rect x="99.4670%" y="148" width="0.2772%" height="15" fill="rgb(239,221,27)" fg:x="13995" fg:w="39"/><text x="99.7170%" y="158.50"></text></g><g><title>step (torch/optim/adam.py:141) (39 samples, 0.28%)</title><rect x="99.4670%" y="164" width="0.2772%" height="15" fill="rgb(222,198,25)" fg:x="13995" fg:w="39"/><text x="99.7170%" y="174.50"></text></g><g><title>adam (torch/optim/adam.py:281) (39 samples, 0.28%)</title><rect x="99.4670%" y="180" width="0.2772%" height="15" fill="rgb(211,99,13)" fg:x="13995" fg:w="39"/><text x="99.7170%" y="190.50"></text></g><g><title>train_model (reward.py:329) (21 samples, 0.15%)</title><rect x="99.7655%" y="100" width="0.1493%" height="15" fill="rgb(232,111,31)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="110.50"></text></g><g><title>wrapper (wandb/sdk/wandb_run.py:420) (21 samples, 0.15%)</title><rect x="99.7655%" y="116" width="0.1493%" height="15" fill="rgb(245,82,37)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="126.50"></text></g><g><title>wrapper_fn (wandb/sdk/wandb_run.py:371) (21 samples, 0.15%)</title><rect x="99.7655%" y="132" width="0.1493%" height="15" fill="rgb(227,149,46)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="142.50"></text></g><g><title>wrapper (wandb/sdk/wandb_run.py:361) (21 samples, 0.15%)</title><rect x="99.7655%" y="148" width="0.1493%" height="15" fill="rgb(218,36,50)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="158.50"></text></g><g><title>log (wandb/sdk/wandb_run.py:1820) (21 samples, 0.15%)</title><rect x="99.7655%" y="164" width="0.1493%" height="15" fill="rgb(226,80,48)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="174.50"></text></g><g><title>_log (wandb/sdk/wandb_run.py:1595) (21 samples, 0.15%)</title><rect x="99.7655%" y="180" width="0.1493%" height="15" fill="rgb(238,224,15)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="190.50"></text></g><g><title>_partial_history_callback (wandb/sdk/wandb_run.py:1467) (21 samples, 0.15%)</title><rect x="99.7655%" y="196" width="0.1493%" height="15" fill="rgb(241,136,10)" fg:x="14037" fg:w="21"/><text x="100.0155%" y="206.50"></text></g><g><title>&lt;module&gt; (main.py:97) (6,710 samples, 47.69%)</title><rect x="52.2672%" y="68" width="47.6901%" height="15" fill="rgb(208,32,45)" fg:x="7354" fg:w="6710"/><text x="52.5172%" y="78.50">&lt;module&gt; (main.py:97)</text></g><g><title>train_reward_function (reward.py:419) (6,706 samples, 47.66%)</title><rect x="52.2957%" y="84" width="47.6617%" height="15" fill="rgb(207,135,9)" fg:x="7358" fg:w="6706"/><text x="52.5457%" y="94.50">train_reward_function (reward.py:419)</text></g><g><title>all (14,070 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="14070"/><text x="0.2500%" y="62.50"></text></g></svg></svg>